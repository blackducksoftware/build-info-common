/*******************************************************************************
 * Copyright (C) 2016 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *******************************************************************************/
package com.blackducksoftware.integration.build;

public class VulnerabilityCounts {
	private int low = 0;
	private int medium = 0;
	private int high = 0;

	public void setLow(final int low) throws IllegalArgumentException {
		if (low < 0) {
			throw new IllegalArgumentException("Count can't be less then zero");
		}
		this.low = low;
	}

	public void setMedium(final int medium) throws IllegalArgumentException {
		if (medium < 0) {
			throw new IllegalArgumentException("Count can't be less then zero");
		}
		this.medium = medium;
	}

	public void setHigh(final int high) throws IllegalArgumentException {
		if (high < 0) {
			throw new IllegalArgumentException("Count can't be less then zero");
		}
		this.high = high;
	}

	@Override
	public String toString() {
		final StringBuilder builder = new StringBuilder();
		builder.append("VulnerabilityCounts [low=");
		builder.append(low);
		builder.append(", medium=");
		builder.append(medium);
		builder.append(", high=");
		builder.append(high);
		builder.append("]");
		return builder.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + high;
		result = prime * result + low;
		result = prime * result + medium;
		return result;
	}

	@Override
	public boolean equals(final Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityCounts other = (VulnerabilityCounts) obj;
		if (high != other.high) {
			return false;
		}
		if (low != other.low) {
			return false;
		}
		if (medium != other.medium) {
			return false;
		}
		return true;
	}

	public int getLow() {
		return low;
	}

	public int getMedium() {
		return medium;
	}

	public int getHigh() {
		return high;
	}

}
